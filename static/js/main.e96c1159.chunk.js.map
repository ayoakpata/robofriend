{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","robots.js","containers/App.js","serviceWorker.js","index.js"],"names":["card","name","email","id","className","alt","src","CardList","robots","map","user","i","Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","username","App","onSearchChange","event","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e96c1159.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst card = ({ name, email, id }) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?50x50`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n}\r\n\r\nexport default card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => { \t\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user, i) => {\r\n\treturn ( \r\n\t\t\t<Card \r\n\t\t\t\tkey={i} \r\n\t\t\t\tid={robots[i].id} \r\n\t\t\t\tname={robots[i].name} \r\n\t\t\t\temail={robots[i].email}\r\n\t\t\t\t/>\r\n\t\t);\r\n\t}) \r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n\treturn (\r\n      <div className='pa2 tc'>\r\n\t\t   <input \r\n         className='pa3 ba b--green bg-lightest-blue'\r\n         type='search' \r\n         placeholder='search robots' \r\n         onChange={searchChange}\r\n         />\r\n      </div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\r\n\t\t\t<div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n\t\t\t\t{props.children}\r\n\t\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>oh no!!. This is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport { robots } from '../robots';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n   constructor() {\r\n      super()\r\n      this.state = {\r\n         robots: robots,\r\n         searchfield: ''\r\n      }\r\n   }\r\n\r\ncomponentDidMount() {\r\n   fetch('https://jsonplaceholder.typicode.com/')\r\n      .then(response=> response.json())\r\n      .then(users => {});\r\n}   \r\n\r\n   onSearchChange = (event) => {\r\n      this.setState({ searchfield: event.target.value })\r\n      console.log(event.target.value);\r\n   }\r\n\r\n\r\n   render() {\r\n      const { robots, searchfield } = this.state;\r\n      const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n  })\r\n    return !robots.length ? \r\n        <h1>Loading</h1> :\r\n      (\r\n         <div className='tc'>\r\n            <h1 className='f1'>Robofriends</h1>\r\n            <SearchBox searchChange={this.onSearchChange}/>\r\n            <Scroll>\r\n               <ErrorBoundry>\r\n                  <CardList robots={filteredRobots} />\r\n               </ErrorBoundry>   \r\n            </Scroll>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you w your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}